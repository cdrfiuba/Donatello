Import('env')
from pathlib import Path, PurePath
import os
import re
import textwrap


states = set()


def generate_code(env, node):
    """
    Quite inefficient, gets called a lot.
    Generates the code we need for our FSM.
    """
    global states

    workspace_root = Path(env.Dir('#').abspath)
    autogenerated_directory = Path(workspace_root, 'include', 'autogenerated')
    if not autogenerated_directory.exists():
        os.makedirs(autogenerated_directory)

    states_header = Path(autogenerated_directory, 'states.h')

    with open(str(node), 'r') as f:
        for line in f:
            if (match := re.match('STATE\(([\w]+)\) {', line)):
                states |= {match.groups()[0]}

    with open(states_header, 'w') as f:
        sorted_states = list(states)
        functions_declarations = '\n'.join([f'void state_{state}_function();' for state in sorted_states])
        enum_table = textwrap.indent(',\n'.join([f'{state} = {i}' for i, state in enumerate(sorted_states)]), prefix='  ')
        enum_table = f'enum class State : uint8_t {{\n{enum_table}\n}};'
        dispatch_table = textwrap.indent(',\n'.join([f'state_{state}_function' for state in sorted_states]), prefix='  ')
        dispatch_table = f'StateFunctionType dispatch_table[{len(sorted_states)}] = {{\n{dispatch_table}\n}};'
        f.write(textwrap.dedent(
f'''
#pragma once

#include <stdint.h>

#define STATE(state_name) void state_##state_name##_function()

#define EXEC_STATE(state) dispatch_table[static_cast<uint8_t>(state)]()

using StateFunctionType = void(*)();

{functions_declarations}

{enum_table}

{dispatch_table}
'''))

    return node


env.AddBuildMiddleware(
    generate_code,
    '*'
)