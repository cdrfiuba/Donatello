#include <Arduino.h>
#include "autogenerated/states.h"

#define ELAPSED() (micros() - s.t0)

// Puente H
#define AIA A0
#define AIB A1  
#define BIA A2  
#define BIB A3

// Infrarrojos
#define PIN_SENSOR_IZQUIERDO    10
#define PIN_SENSOR_CENTRO       11
#define PIN_SENSOR_DERECHO      12
#define PIN_SENSORS_MASK        0b00011100
#define PIN_SENSORS_SHIFT       2

#define READ_SENSORS()  ((PINB & PIN_SENSORS_MASK) >> PIN_SENSORS_SHIFT)

// Casos que no tenemos contemplados, mejor ignorar
#define UNDEFINED   125

#define BOTON_ENCENDIDO 7

constexpr int8_t sensors_to_error[] = {
    UNDEFINED,  // ---
    +2,         // --*
     0,         // -*-
    +1,         // -**
    -2,         // *--
    UNDEFINED,  // *-*
    -1,         // **-
    UNDEFINED   // ***
};

constexpr uint8_t kVelMaxIzq = 150;
constexpr uint8_t kVelMaxDer = 180;
constexpr uint8_t kP = 5;

struct ProgramData {
    State current_state = State::init;
    unsigned long t0;
    unsigned long dt;
    uint8_t velDer = kVelMaxDer;
    uint8_t velIzq = kVelMaxIzq;
};
ProgramData s{};


STATE(init) {
    if (digitalRead(BOTON_ENCENDIDO)) {
        s.current_state = State::follow_line;
    }
}

STATE(follow_line) {
    int16_t error = sensors_to_error[READ_SENSORS()];
    
    // Better safe than sorry
    if (error == UNDEFINED) {
        return;
    }

    s.velDer = min(kVelMaxDer + error * kP, 255);
    s.velIzq = min(kVelMaxIzq - error * kP, 255);
}

void setup() {
    // Puente H
    pinMode(AIA, OUTPUT);
    pinMode(AIB, OUTPUT);
    pinMode(BIA, OUTPUT);
    pinMode(BIB, OUTPUT);

    pinMode(PIN_SENSOR_IZQUIERDO, INPUT);
    pinMode(PIN_SENSOR_CENTRO, INPUT);
    pinMode(PIN_SENSOR_DERECHO, INPUT);
    Serial.begin(9600);

    pinMode(BOTON_ENCENDIDO, INPUT);
}
 
void loop() {
    EXEC_STATE(s.current_state);

    analogWrite(AIA, 0);
    analogWrite(AIB, s.velDer);
    analogWrite(BIA, 0);
    analogWrite(BIB, s.velIzq);
}