#include <Arduino.h>
#include <Servo.h>
#include "autogenerated/states.h"

#define ELAPSED() (micros() - s.t0)

// Puente H
#define AIA A0
#define AIB A1  
#define BIA A2  
#define BIB A3

// Infrarrojos
#define PIN_SENSOR_IZQUIERDO    9
#define PIN_SENSOR_CENTRO       10
#define PIN_SENSOR_DERECHO      11
#define PIN_SENSORS_MASK        0b00001110
#define PIN_SENSORS_SHIFT       1

#define READ_SENSORS()  ((PINB & PIN_SENSORS_MASK) >> PIN_SENSORS_SHIFT)

// Casos que no tenemos contemplados, mejor ignorar
#define UNDEFINED   125

#define BOTON_ENCENDIDO 7

constexpr float sensors_to_error[] = {
    UNDEFINED,  // ---
    +2,         // --*
     0,         // -*-
    +1,         // -**
    -2,         // *--
    UNDEFINED,  // *-*
    -1,         // **-
    UNDEFINED   // ***
};

Servo servomotor1;
Servo servomotor2;

constexpr uint8_t kVelMaxIzq = 150;
constexpr uint8_t kVelMaxDer = 180;
constexpr float kP = 28; //it was 28
constexpr float kD = 0;

struct ProgramData {
    int16_t last_error =  0;
    unsigned long t0;
    float dt;
    float error_p;
    float error_d;
    uint8_t velDer = kVelMaxDer;
    uint8_t velIzq = kVelMaxIzq;
};
ProgramData s{};


void follow_line_p() {
    int16_t error = sensors_to_error[READ_SENSORS()];;
    // Better safe than sorry
    if (error == UNDEFINED) {
        return;
    }
    s.error_p = error;
}

void follow_line_d() {
    s.error_d = (s.error_p - s.last_error) / s.dt;
    s.last_error = s.last_error;
}

void setup() {
    // Puente H


    pinMode(PIN_SENSOR_IZQUIERDO, INPUT);
    pinMode(PIN_SENSOR_CENTRO, INPUT);
    pinMode(PIN_SENSOR_DERECHO, INPUT);
    pinMode(A7, OUTPUT);
    pinMode(A5, OUTPUT);

    servomotor1.attach(A7);
    servomotor2.attach(A5);

    pinMode(BOTON_ENCENDIDO, INPUT);

    //while(!digitalRead(BOTON_ENCENDIDO));
    s.t0 = millis();
}
 
void loop() {
    /*follow_line_p();
    if (100 < (s.dt = millis() - s.t0)) {
        s.t0 = millis(); 
        follow_line_d();
    }*/
    //s.velDer = min(kVelMaxDer  + s.error_d * kD + s.error_p * kP, 90);
    //s.velIzq = min(kVelMaxIzq  - s.error_d * kD - s.error_p * kP, 90);


    servomotor1.write(180);
    delay(1000);
    
}